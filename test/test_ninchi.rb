require 'minitest/autorun'
require './inchi'
require './periodic_table'

class Molecule
  include Inchi
  attr_reader :reference_ninchi_string

  def initialize(name, ninchi_string)
    @name = name
    @reference_ninchi_string = ninchi_string
    molfile = read_molfile("test/testfiles/#{name}/#{name}.mol")
    @molecule = create_molecule_array(molfile, PeriodicTable::ELEMENTS)
    @adjacency_matrix, @atom_list = create_adjacency_matrix(@molecule)
  end

  def ninchi_string_original_input
    adjacency_matrix, atom_list = sort_adjacency_matrix(@adjacency_matrix, @atom_list)
    write_ninchi_string(@molecule, adjacency_matrix, PeriodicTable::ELEMENTS)
  end

end

class MoleculeCollection
  def initialize
    @hydrogen = Molecule.new(
      'hydrogen',
      'nInChI=1S/H2/c["(0-1)", "(0:1)(1:0)", "01-10", "10110", 22, "hex:16", "base32:m"]'
    )

    @cisplatin = Molecule.new(
      'cisplatin',
      'nInChI=1S/H6Cl2N2Pt/c["(0-6)(1-6)(2-6)(3-7)(4-7)(5-7)(6-10)(7-10)(8-10)(9-10)", "(0:6)(1:6)(2:6)(3:7)(4:7)(5:7)(6:0,1,2,10)(7:3,4,5,10)(8:10)(9:10)(10:6,7,8,9)", "00000010000-00000010000-00000010000-00000001000-00000001000-00000001000-11100000001-00011100001-00000000001-00000000001-00000011110", "10000001000000000010000000000100000000000100000000001000000000010001110000000100011100001000000000010000000000100000011110", 2679235325161742555733669265448896542, "hex:204008010010020047011c20040081e", "base32:20g08040100g08s0ho804020u"]'
    )

    @tpp = Molecule.new(
      'tpp',
      'nInChI=1S/C20N4/c["(0-1)(0-12)(1-13)(2-3)(2-14)(3-16)(4-5)(4-15)(5-17)(6-7)(6-18)(7-19)(8-12)(8-15)(9-14)(9-17)(10-13)(10-18)(11-16)(11-19)(12-20)(13-20)(14-21)(15-22)(16-21)(17-22)(18-23)(19-23)", "(0:1,12)(1:0,13)(2:3,14)(3:2,16)(4:5,15)(5:4,17)(6:7,18)(7:6,19)(8:12,15)(9:14,17)(10:13,18)(11:16,19)(12:0,8,20)(13:1,10,20)(14:2,9,21)(15:4,8,22)(16:3,11,21)(17:5,9,22)(18:6,10,23)(19:7,11,23)(20:12,13)(21:14,16)(22:15,17)(23:18,19)", "010000000000100000000000-100000000000010000000000-000100000000001000000000-001000000000000010000000-000001000000000100000000-000010000000000001000000-000000010000000000100000-000000100000000000010000-000000000000100100000000-000000000000001001000000-000000000000010000100000-000000000000000010010000-100000001000000000001000-010000000010000000001000-001000000100000000000100-000010001000000000000010-000100000001000000000100-000001000100000000000010-000000100010000000000001-000000010001000000000001-000000000000110000000000-000000000000001010000000-000000000000000101000000-000000000000000000110000", "1010000000000100000000000100000000000010000000000000100000000001000000000001000000000000010000000000001000000000100000000000010000000000001000000000000010000000000100000000000100000000000010000000000000000100100000000000000000000001001000000000000000000010000100000000000000000000010010000100000001000000000001000010000000010000000001000001000000100000000000100000010001000000000000010000100000001000000000100000001000100000000000010000000100010000000000001000000010001000000000001000000000000110000000000000000000000001010000000000000000000000101000000000000000000000000110000", 309193200912699438590131120670166638128849612790618549964765726301970815348606492490212704349481774919535408053899438062064911583617331786848909899811129300108180463275737136, "hex:1400800800400100200200080040100080040010020020010000900000240000420000090808008402008204004088002101004044002022001011001000c00000280000140000030", "base32:2g080200800g080200400g0g0200800g0802008002800014000440001440g04408084100824008810104801048010480200c000050000500001g"]',
    )
  end

  def molecules
    [@hydrogen, @cisplatin, @tpp]
  end
end

class TestSuite < Minitest::Test
  # Metaprogramming shenanigans for test parameterization (as in pytest)
  # inspired by https://stackoverflow.com/questions/18770988/.
  MoleculeCollection.new.molecules.each do |molecule|
    define_method("test_ninchi_string_original_input_#{molecule}") do
      assert_equal molecule.reference_ninchi_string, molecule.ninchi_string_original_input
    end

    # # Test a random permutation of the molecule indices (generates different permutation on each run).
    # define_method("test_ninchi_string_permuted_input_#{molecule}") do
    #   assert_equal molecule.reference_ninchi_string, molecule.ninchi_string_permuted_input
    # end
  end
end
